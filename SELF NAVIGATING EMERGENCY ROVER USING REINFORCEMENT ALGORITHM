#define enA 10 
#define in1 9  
#define in2 8  
#define in3 7  
#define in4 6  
#define enB 5 
#define ir_R A0
#define ir_F A1
#define ir_L A2
#define servo A4
#define pump A5

int Speed = 70; 
int s1, s2, s3;
void setup() {
  
  Serial.begin(9600); 

  // Pin mode declarations
  pinMode(ir_R, INPUT);
  pinMode(ir_F, INPUT);
  pinMode(ir_L, INPUT);
  pinMode(enA, OUTPUT);
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);
  pinMode(enB, OUTPUT);
  pinMode(servo, OUTPUT);
  pinMode(pump, OUTPUT);
// Servo movement to initial positions
  for (int angle = 90; angle <= 140; angle += 5) {
    servoPulse(servo, angle);
  }
  for (int angle = 140; angle >= 40; angle -= 5) {
    servoPulse(servo, angle);
  }
  for (int angle = 40; angle <= 95; angle += 5) {
    servoPulse(servo, angle);
  }

  // Set initial motor speeds
  analogWrite(enA, Speed); 
  analogWrite(enB, Speed); 
  delay(500);
}

void loop() {
  // Read sensor values
  s1 = analogRead(ir_R);
  s2 = analogRead(ir_F);
  s3 = analogRead(ir_L);
// Print sensor values for debugging
  Serial.print(s1);
  Serial.print("\t");
  Serial.print(s2);
  Serial.print("\t");
  Serial.println(s3);
  delay(50);

  // Decision making based on sensor values
  if (s1 < 250) {
    Stop();
    digitalWrite(pump, HIGH);
    sweepServo(40, 90, servo);
  } 
  else if (s2 < 350) {
    Stop();
    digitalWrite(pump, HIGH);
    sweepServo(90, 140, servo);
    sweepServo(140, 40, servo);
    sweepServo(40, 90, servo);
  } 
else if (s3 < 250) {
    Stop();
    digitalWrite(pump, HIGH);
    sweepServo(90, 140, servo);
    sweepServo(140, 90, servo);
  } 
  else if (s1 >= 251 && s1 <= 700) {
    digitalWrite(pump, LOW);
    backward();
    delay(100);
    turnRight();
    delay(200);
  } 
  else if (s2 >= 251 && s2 <= 800) {
    digitalWrite(pump, LOW);
    forward();
  } 
  else if (s3 >= 251 && s3 <= 700) {
    digitalWrite(pump, LOW);
    backward();
    delay(100);
    turnLeft();
    delay(200);
  } 
  else {
    digitalWrite(pump, LOW);
    Stop();
  }
  
  delay(10);
}
// Function to control servo pulse
void servoPulse(int pin, int angle) {
  int pwm = (angle * 11) + 500; 
  digitalWrite(pin, HIGH);
  delayMicroseconds(pwm);
  digitalWrite(pin, LOW);
  delay(50); // Refresh cycle for servo
}

// Function to sweep servo between two angles
void sweepServo(int startAngle, int endAngle, int pin) {
  int step = (startAngle < endAngle) ? 3 : -3; 
  for (int angle = startAngle; angle != endAngle; angle += step) {
    servoPulse(pin, angle);
  }
}

// Function to move forward
void forword() {
  digitalWrite(in1, HIGH); 
  digitalWrite(in2, LOW);  
  digitalWrite(in3, LOW);  
  digitalWrite(in4, HIGH); 
}

// Function to move backward
void backword() {
  digitalWrite(in1, LOW);  
  digitalWrite(in2, HIGH); 
  digitalWrite(in3, HIGH); 
  digitalWrite(in4, LOW);  
}
// Function to turn right
void turnRight() {
  digitalWrite(in1, LOW); 
  digitalWrite(in2, HIGH); 
  digitalWrite(in3, LOW);  
  digitalWrite(in4, HIGH); 
}

// Function to turn left
void turnLeft() {
  digitalWrite(in1, HIGH); 
  digitalWrite(in2, LOW);  
  digitalWrite(in3, HIGH); 
  digitalWrite(in4, LOW);  
}

// Function to stop
void Stop() {
  digitalWrite(in1, LOW); 
  digitalWrite(in2, LOW); 
  digitalWrite(in3, LOW); 
  digitalWrite(in4, LOW); 
}
